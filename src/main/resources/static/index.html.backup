<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SQL Query Assistant</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .chat-container {
            max-width: 800px;
            margin: 20px auto;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            height: 90vh;
            display: flex;
            flex-direction: column;
            background: #f8f9fa;
        }
        
        .chat-header {
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
            color: white;
            padding: 15px 20px;
            font-size: 1.2rem;
            font-weight: 500;
            display: flex;
            align-items: center;
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: #f8f9fa;
        }
        
        .message {
            margin-bottom: 15px;
            max-width: 85%;
            clear: both;
            position: relative;
            padding: 12px 16px;
            border-radius: 18px;
            line-height: 1.6;
            word-wrap: break-word;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .message-bot {
            background-color: #f8f9fa;
            color: #212529;
            float: left;
            margin-left: 5px;
            border-bottom-left-radius: 4px;
            border-top-left-radius: 4px;
            border: 1px solid rgba(0, 0, 0, 0.05);
            margin-right: auto;
        }
        
        .message-bot .message-content {
            padding: 12px 16px;
        }
        
        .message-bot .message-time {
            font-size: 0.7rem;
            opacity: 0.7;
            margin-top: 6px;
            text-align: right;
            font-weight: 400;
            letter-spacing: 0.3px;
            color: inherit;
        }
        
        .message-actions {
            position: absolute;
            top: 8px;
            right: 8px;
            opacity: 0;
            transition: opacity 0.2s;
            display: flex;
            gap: 4px;
        }
        
        .message:hover .message-actions {
            opacity: 1;
        }
        
        .btn-message-action {
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: #495057;
            font-size: 0.8rem;
            transition: all 0.2s;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .btn-message-action:hover {
            background: white;
            color: #212529;
            transform: scale(1.1);
        }
        
        .message-bot .btn-message-action {
            background: rgba(255, 255, 255, 0.8);
        }
        
        .chat-input {
            display: flex;
            padding: 16px;
            background-color: #f8f9fa;
            border-top: 1px solid #e9ecef;
            position: relative;
            transition: background-color 0.2s;
            gap: 10px;
            align-items: center;
        }
        
        .chat-input:focus-within {
            background-color: white;
        }
        
        #userInput {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #dee2e6;
            border-radius: 20px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.2s, box-shadow 0.2s;
        }

        #userInput:focus {
            border-color: #4361ee;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.1);
        }
        
        .example-query-highlight {
            animation: highlightPulse 1s ease-in-out;
        }
        
        @keyframes highlightPulse {
            0%, 100% { box-shadow: 0 0 0 0 rgba(67, 97, 238, 0); }
            50% { box-shadow: 0 0 0 4px rgba(67, 97, 238, 0.2); }
        }
        
        .scroll-to-bottom {
            position: fixed;
            right: 30px;
            bottom: 80px;
            background: #4e73df;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            opacity: 0.8;
            transition: all 0.3s;
            z-index: 1000;
        }
        
        .scroll-to-bottom:hover {
            opacity: 1;
            transform: translateY(-2px);
        }
        
        .scroll-to-bottom.hidden {
            opacity: 0;
            pointer-events: none;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .chat-container {
                margin: 0;
                height: 100vh;
                border-radius: 0;
            }
            
            .message {
                max-width: 90%;
            }
            
            .chat-messages {
                padding: 15px 10px;
            }
            
            .chat-input {
                padding: 10px;
            }
            
            #userInput {
                padding: 10px 15px;
            }
        }
        }
    </style>
</head>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <i class="fas fa-robot"></i>
            <span>SQL Query Assistant</span>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <!-- Welcome message -->
            <div class="message message-bot">
                <div class="message-content">
                    <p>Hello! I'm your SQL Query Assistant. Ask me to run queries or help with database questions.</p>
                    <p class="mb-2">Try asking something like:</p>
                    <div class="query-examples">
                        <div class="example-query" onclick="insertExampleQuery('Show me all employees')">Show employees</div>
                        <div class="example-query" onclick="insertExampleQuery('Find employees who joined this year')">Recent hires</div>
                        <div class="example-query" onclick="insertExampleQuery('List departments and their employee count')">Department stats</div>
                        <div class="example-query" onclick="insertExampleQuery('Show highest paid employees')">Top earners</div>
                    </div>
                </div>
                <div class="message-time">Just now</div>
            </div>
        </div>
        
        <div class="chat-input">
            <input type="text" id="userInput" 
                   class="form-control"
                   placeholder="Type your query here..." 
                   onkeydown="handleKeyDown(event)"
                   aria-label="Type your query">
            <button id="sendButton" onclick="sendMessage()" aria-label="Send message">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
        
        <!-- Scroll to bottom button -->
        <div id="scrollToBottom" class="scroll-to-bottom hidden" onclick="scrollToBottom(true)" title="Scroll to bottom">
            <i class="fas fa-chevron-down"></i>
        </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
        // Configuration
        const CONFIG = {
            API_BASE_URL: 'http://localhost:8080/api',
            MAX_ROWS: 100, // Maximum number of rows to display in tables
            REQUEST_TIMEOUT: 30000, // 30 seconds
            TYPING_INDICATOR_DELAY: 300, // Delay before showing typing indicator (ms)
            MESSAGE_ANIMATION_DURATION: 200, // Message animation duration (ms)
            SCROLL_DEBOUNCE_DELAY: 100 // Scroll event debounce delay (ms)
        };
        
        // App state
        const state = {
            isTyping: false,
            scrollBottomButtonVisible: false,
            lastScrollPosition: 0,
            messageHistory: [],
            currentHistoryIndex: -1,
            typingIndicatorTimeout: null
        };
        
        // Initialize chat when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Focus the input field when the page loads
            const userInput = document.getElementById('userInput');
            userInput.focus();
            
            // Add event listeners
            setupEventListeners();
            
            // Check for scroll position to show/hide scroll to bottom button
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.addEventListener('scroll', handleScroll);
            
            // Initial check for scroll position
            checkScrollPosition();
        });
        
        function setupEventListeners() {
            const userInput = document.getElementById('userInput');
            const sendButton = document.getElementById('sendButton');
            const chatMessages = document.getElementById('chatMessages');
            
            // Handle paste event to clean up any rich text
            userInput.addEventListener('paste', handlePaste);
            
            // Handle input for auto-resizing and history navigation
            userInput.addEventListener('input', handleInput);
            
            // Handle keyboard shortcuts
            userInput.addEventListener('keydown', handleKeyDown);
            
            // Handle send button click
            sendButton.addEventListener('click', sendMessage);
            
            // Handle scroll events with debouncing
            let scrollTimeout;
            chatMessages.addEventListener('scroll', () => {
                clearTimeout(scrollTimeout);
                scrollTimeout = setTimeout(handleScroll, CONFIG.SCROLL_DEBOUNCE_DELAY);
            });
            
            // Handle window resize
            window.addEventListener('resize', debounce(handleWindowResize, 200));
            
            // Handle click on scroll to bottom button
            document.getElementById('scrollToBottom').addEventListener('click', () => scrollToBottom(true));
            
            // Handle click on example queries
            document.querySelectorAll('.example-query').forEach(btn => {
                btn.addEventListener('click', () => {
                    insertExampleQuery(btn.textContent);
                });
            });
        }
        
        function handlePaste(e) {
            e.preventDefault();
            const text = (e.clipboardData || window.clipboardData).getData('text/plain');
            document.execCommand('insertText', false, text);
        }
        
        function handleInput(e) {
            const input = e.target;
            input.style.height = 'auto';
            input.style.height = Math.min(input.scrollHeight, 150) + 'px'; // Limit max height
            
            // Enable/disable send button
            document.getElementById('sendButton').disabled = !input.value.trim();
            
            // Save to history if not empty and different from last message
            const currentMessage = input.value.trim();
            if (currentMessage && 
                (state.messageHistory.length === 0 || 
                 state.messageHistory[state.messageHistory.length - 1] !== currentMessage)) {
                state.messageHistory.push(currentMessage);
                state.currentHistoryIndex = state.messageHistory.length;
            }
        }
        
        function handleKeyDown(e) {
            const input = e.target;
            const history = state.messageHistory;
            
            // Handle up/down arrow keys for message history
            if (e.key === 'ArrowUp' && state.currentHistoryIndex > 0) {
                e.preventDefault();
                state.currentHistoryIndex--;
                input.value = history[state.currentHistoryIndex];
                // Move cursor to end of input
                setTimeout(() => {
                    input.selectionStart = input.selectionEnd = input.value.length;
                }, 0);
            } 
            else if (e.key === 'ArrowDown' && state.currentHistoryIndex < history.length - 1) {
                e.preventDefault();
                state.currentHistoryIndex++;
                input.value = history[state.currentHistoryIndex] || '';
            }
            // Handle Enter key (without Shift)
            else if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                if (!state.isTyping) {
                    sendMessage();
                }
            }
            // Handle Escape key to clear input
            else if (e.key === 'Escape') {
                input.value = '';
                input.style.height = 'auto';
                state.currentHistoryIndex = history.length;
            }
        }
        
        function handleWindowResize() {
            const chatContainer = document.querySelector('.chat-container');
            const headerHeight = document.querySelector('.chat-header').offsetHeight;
            const inputHeight = document.querySelector('.chat-input').offsetHeight;
            
            chatContainer.style.setProperty('--header-height', `${headerHeight}px`);
            chatContainer.style.setProperty('--input-height', `${inputHeight}px`);
            
            scrollToBottom();
        }
        
        // Utility function to debounce function calls
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
        
        // Insert example query into the input field
        function insertExampleQuery(query) {
            const input = document.getElementById('userInput');
            input.value = query;
            input.focus();
            // Trigger input event for auto-resize and button state
            input.dispatchEvent(new Event('input'));
            
            // Add visual feedback
            input.classList.add('example-query-highlight');
            setTimeout(() => {
                input.classList.remove('example-query-highlight');
            }, 1000);
        }
        
        // Send message to the server
        async function sendMessage() {
            const userInput = document.getElementById('userInput');
            const message = userInput.value.trim();
            
            if (!message) return;
            
            // Disable input and button while processing
            userInput.disabled = true;
            document.getElementById('sendButton').disabled = true;
            
            // Add user message to chat
            addMessage('user', message);
            userInput.value = '';
            userInput.style.height = 'auto'; // Reset input height
            
            // Save to message history
            state.messageHistory.push(message);
            state.currentHistoryIndex = state.messageHistory.length;
            
            // Show typing indicator
            const typingIndicator = showTypingIndicator();
            
            try {
                // Send to backend
                const response = await fetchWithTimeout(
                    `${CONFIG.API_BASE_URL}/query/ai`,
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            query: message,
                            sessionId: state.sessionId || ''
                        })
                    },
                    CONFIG.REQUEST_TIMEOUT
                );
                
                // Remove typing indicator
                if (typingIndicator && typingIndicator.parentNode) {
                    typingIndicator.remove();
                }
                
                const data = await response.json();
                
                // Handle the response
                if (data.error) {
                    addMessage('bot', `Error: ${data.error}`);
                } else {
                    addMessage('bot', data.response || 'No response from server');
                }
        }
                
        const data = await response.json();
                
        // Handle the response
        if (data.error) {
            addMessage('bot', `Error: ${data.error}`);
        } else {
            addMessage('bot', data.response || 'No response from server');
        }
                
        // Save session ID if provided
        if (data.sessionId) {
            state.sessionId = data.sessionId;
        }
    } catch (error) {
        console.error('Error:', error);
        addMessage('bot', 'Sorry, there was an error processing your request. Please try again.');
    } finally {
        // Re-enable input and button
        userInput.disabled = false;
        document.getElementById('sendButton').disabled = false;
        userInput.focus();
    }
}
        
// Format query results as an HTML table
function formatResultsAsTable(results) {
    if (!results || results.length === 0) return '<p>No results found.</p>';
        // Format query results as an HTML table
        function formatResultsAsTable(results) {
            if (!results || results.length === 0) return '<p>No results found.</p>';
            
            const headers = Object.keys(results[0]);
            let tableHtml = `
                <div class="table-container">
                    <div class="table-controls">
                        <div class="table-info">${results.length} ${results.length === 1 ? 'row' : 'rows'} returned</div>
                        <div class="table-actions">
                            <button class="btn-table-action export-csv"><i class="fas fa-download"></i> CSV</button>
                            <button class="btn-table-action copy-table"><i class="far fa-copy"></i> Copy</button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    ${headers.map(header => `<th>${escapeHtml(header)}</th>`).join('')}
                                </tr>
                            </thead>
                            <tbody>
            `;
            
            // Add rows
            results.forEach((row, rowIndex) => {
                tableHtml += '<tr>';
                headers.forEach(header => {
                    tableHtml += `<td class="${getCellClass(row[header])}">${formatCellValue(row[header])}</td>`;
                });
                tableHtml += '</tr>';
            });
            
            tableHtml += `
                            </tbody>
                        </table>
                    </div>
                </div>
            `;
            
            return tableHtml;
        }
        
        // Format cell value for display with truncation
        function formatCellValue(value) {
            if (value === null || value === undefined) {
                return '<span class="text-muted">NULL</span>';
            }
            
            const strValue = String(value);
            const isLongText = strValue.length > 100;
            const displayValue = escapeHtml(strValue);
            
            if (typeof value === 'object') {
                const jsonStr = JSON.stringify(value, null, 2);
                return `<div class="json-display">${syntaxHighlight(jsonStr)}</div>`;
            }
            
            if (isLongText) {
                const truncated = escapeHtml(strValue.substring(0, 100) + '...');
                return `
                    <div class="truncate-text" onclick="this.classList.toggle('expanded')">
                        <span class="truncated">${truncated}</span>
                        <span class="full">${displayValue}</span>
                        <button class="btn-expand" title="Click to expand">▼</button>
                    </div>
                `;
            }
            
            return displayValue;
        }
        
        // Get CSS class for cell based on value type
        function getCellClass(value) {
            if (value === null || value === undefined) return '';
            
            if (typeof value === 'number') return 'cell-number';
            if (typeof value === 'boolean') return 'cell-boolean';
            
            // Check if value is a date string
            if (typeof value === 'string' && !isNaN(Date.parse(value))) {
                return 'cell-date';
            }
            
            if (typeof value === 'object') return 'cell-json';
            
            return '';
        }
        
        // Show typing indicator
        function showTypingIndicator() {
            const chatMessages = document.getElementById('chatMessages');
            
            // Remove any existing typing indicator
            const existingIndicator = document.getElementById('typingIndicator');
            if (existingIndicator) {
                existingIndicator.remove();
            }
            
            const typingDiv = document.createElement('div');
            typingDiv.className = 'message message-bot';
            typingDiv.id = 'typingIndicator';
            
            const dots = document.createElement('div');
            dots.className = 'typing-dots';
            dots.innerHTML = `
                <span></span>
                <span></span>
                <span></span>
            `;
            
            typingDiv.appendChild(dots);
            chatMessages.appendChild(typingDiv);
            scrollToBottom();
            
            return typingDiv;
        }
        
        // Scroll chat to bottom
        function scrollToBottom(force = false) {
            const chatMessages = document.getElementById('chatMessages');
            if (chatMessages) {
                // Only auto-scroll if we're already near the bottom or forced
                const isNearBottom = chatMessages.scrollTop + chatMessages.clientHeight > chatMessages.scrollHeight - 100;
                if (isNearBottom || force) {
                    chatMessages.scrollTo({
                        top: chatMessages.scrollHeight,
                        behavior: 'smooth'
                    });
                }
            }
            
            // Update scroll button visibility
            checkScrollPosition();
        }
        
        // Check scroll position to show/hide scroll to bottom button
        function handleScroll() {
            checkScrollPosition();
        }
        
        function checkScrollPosition() {
            const chatMessages = document.getElementById('chatMessages');
            const scrollButton = document.getElementById('scrollToBottom');
            
            if (!chatMessages || !scrollButton) return;
            
            // Show button if not at bottom
            const isAtBottom = chatMessages.scrollTop + chatMessages.clientHeight >= chatMessages.scrollHeight - 20;
            
            if (!isAtBottom && !state.scrollBottomButtonVisible) {
                scrollButton.classList.remove('hidden');
                state.scrollBottomButtonVisible = true;
            } else if (isAtBottom && state.scrollBottomButtonVisible) {
                scrollButton.classList.add('hidden');
                state.scrollBottomButtonVisible = false;
            }
        }
        
        // Utility function to escape HTML
        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .toString()
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        }
        
        // Fetch with timeout
        async function fetchWithTimeout(resource, options = {}, timeout = 10000) {
            const controller = new AbortController();
            const id = setTimeout(() => controller.abort(), timeout);
            
            try {
                const response = await fetch(resource, {
                    ...options,
                    signal: controller.signal
                });
                clearTimeout(id);
                return response;
            } catch (error) {
                clearTimeout(id);
                throw error;
            }
        }
        
        // Send message to backend
        async function sendToBackend(message) {
            try {
                const response = await fetchWithTimeout(`${CONFIG.API_BASE_URL}/query/ai`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        query: message,
                        useAi: true
                    })
                }, 30000); // 30 seconds timeout
                
                if (!response.ok) {
                    throw new Error(`Server responded with status: ${response.status}`);
                }
                
                const data = await response.json();
                
                // Handle API response
                handleApiResponse(data);
                
            } catch (error) {
                console.error('Error:', error);
                addMessage('bot', 'Error: ' + error.message);
            }
        }
        
        // Handle API response
        function handleApiResponse(data) {
            // Remove typing indicator
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
            
            // Add response to chat
            if (data && data.results && data.results.length > 0) {
                // Format results as a table
                const tableHtml = formatResultsAsTable(data.results);
                const messageDiv = addMessage('bot', tableHtml, true);
                
                // Add copy and export buttons to the table
                addTableControls(messageDiv, data.results);
                
            } else if (data && data.message) {
                addMessage('bot', formatMarkdown(data.message), true);
            } else {
                addMessage('bot', 'No results found.');
            }
        }
        
        // Add table controls (copy and export buttons)
        function addTableControls(messageDiv, data) {
            const table = messageDiv.querySelector('table');
            const tableControls = messageDiv.querySelector('.table-controls');
            
            // Add copy button
            const copyButton = tableControls.querySelector('.copy-table');
            copyButton.onclick = () => copyTableToClipboard(table);
            
            // Add export button
            const exportButton = tableControls.querySelector('.export-csv');
            exportButton.onclick = () => exportToCSV(table, data);
        }
        
        // Copy table to clipboard
        function copyTableToClipboard(table) {
            try {
                const range = document.createRange();
                range.selectNode(table);
                window.getSelection().removeAllRanges();
                window.getSelection().addRange(range);
                
                const successful = document.execCommand('copy');
                const originalText = table.querySelector('.copy-table').innerHTML;
                
                if (successful) {
                    table.querySelector('.copy-table').innerHTML = '<i class="fas fa-check"></i>';
                    table.querySelector('.copy-table').title = 'Copied!';
                    
                    setTimeout(() => {
                        table.querySelector('.copy-table').innerHTML = originalText;
                        table.querySelector('.copy-table').title = 'Copy table';
                    }, 2000);
                }
                
                window.getSelection().removeAllRanges();
                
            } catch (error) {
                console.error('Error copying table:', error);
                alert('Failed to copy table. Please try again.');
            }
        }
        
        // Export table to CSV
        function exportToCSV(table, data) {
            try {
                if (!data || !Array.isArray(data) || data.length === 0) {
                    throw new Error('No data to export');
                }
                
                // Get all unique keys from the data
                const keys = [...new Set(data.flatMap(item => Object.keys(item)))];
                
                // Create CSV content
                let csvContent = keys.join(',') + '\n';
                
                data.forEach(item => {
                    const row = keys.map(key => {
                        let value = item[key];
                        if (value === null || value === undefined) return '';
                        if (typeof value === 'object') {
                            value = JSON.stringify(value);
                        }
                        // Escape quotes and wrap in quotes
                        return `"${String(value).replace(/"/g, '""')}"`;
                    });
                    csvContent += row.join(',') + '\n';
                });
                
                // Create download link
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                
                link.setAttribute('href', url);
                link.setAttribute('download', `query-results-${timestamp}.csv`);
                link.style.display = 'none';
                
                document.body.appendChild(link);
                link.click();
                
                // Clean up
                setTimeout(() => {
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                }, 100);
                
                // Show success feedback
                const originalText = table.querySelector('.export-csv').innerHTML;
                table.querySelector('.export-csv').innerHTML = '<i class="fas fa-check"></i> Exported!';
                table.querySelector('.export-csv').disabled = true;
                
                setTimeout(() => {
                    table.querySelector('.export-csv').innerHTML = originalText;
                    table.querySelector('.export-csv').disabled = false;
                }, 2000);
                
            } catch (error) {
                console.error('Error exporting to CSV:', error);
                alert('Failed to export data. Please try again.');
            }
        }
        
        // Format markdown text
        function formatMarkdown(text) {
            // Convert markdown to HTML
            try {
                // Handle code blocks separately to prevent XSS
                const codeBlockRegex = /```(?:\w*\n)?([\s\S]*?)```/g;
                text = text.replace(codeBlockRegex, (match, code) => {
                    return `<pre><code>${escapeHtml(code)}</code></pre>`;
                });
                
                // Handle inline code
                text = text.replace(/`([^`]+)`/g, '<code>$1</code>');
                
                // Handle links [text](url)
                text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, 
                    '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
                
                // Convert line breaks to <br> for non-code blocks
                const lines = text.split('\n');
                let inCodeBlock = false;
                
                return lines.map(line => {
                    if (line.trim().startsWith('<pre>')) inCodeBlock = true;
                    if (line.trim().endsWith('</pre>')) inCodeBlock = false;
                    
                    if (!inCodeBlock && line.trim() === '') {
                        return '<br>';
                    }
                    return line;
                }).join('\n');
                
            } catch (e) {
                console.error('Error processing message:', e);
                return escapeHtml(text);
            }
        }
        
        // Copy text to clipboard
        function copyToClipboard(text) {
            try {
                const range = document.createRange();
                range.selectNode(document.createTextNode(text));
                window.getSelection().removeAllRanges();
                window.getSelection().addRange(range);
                
                const successful = document.execCommand('copy');
                const originalText = document.querySelector('.btn-message-action').innerHTML;
                
                if (successful) {
                    document.querySelector('.btn-message-action').innerHTML = '<i class="fas fa-check"></i>';
                    document.querySelector('.btn-message-action').title = 'Copied!';
                    
                    setTimeout(() => {
                        document.querySelector('.btn-message-action').innerHTML = originalText;
                        document.querySelector('.btn-message-action').title = 'Copy to clipboard';
                    }, 2000);
                }
                
                window.getSelection().removeAllRanges();
                
            } catch (error) {
                console.error('Error copying text:', error);
                alert('Failed to copy text. Please try again.');
            }
        }
        
        // Setup expandable content
        function setupExpandableContent(messageDiv) {
            const expandableContent = messageDiv.querySelectorAll('.truncate-text');
            
            expandableContent.forEach(content => {
                content.addEventListener('click', () => {
                    content.classList.toggle('expanded');
                });
            });
        }
        
        // Syntax highlight JSON
        function syntaxHighlight(json) {
            if (typeof json !== 'string') {
                json = JSON.stringify(json, null, 2);
            }
            
            return json
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"(\w+)":/g, '<span class="json-key">"$1"</span>:')
                .replace(/: "(.*?)"/g, ': <span class="json-string">"$1"</span>')
                .replace(/: (true|false|null|\d+)/g, ': <span class="json-$1">$1</span>');
        }
            const chatMessages = document.getElementById('chatMessages');
            if (chatMessages) {
                // Only auto-scroll if we're already near the bottom or forced
                const isNearBottom = chatMessages.scrollTop + chatMessages.clientHeight > chatMessages.scrollHeight - 100;
                if (isNearBottom || force) {
                    chatMessages.scrollTo({
                        top: chatMessages.scrollHeight,
                        behavior: 'smooth'
                    });
                }
            }
            
            // Update scroll button visibility
            checkScrollPosition();
        }
        
        // Check scroll position to show/hide scroll to bottom button
        function handleScroll() {
            checkScrollPosition();
        }
        
        function checkScrollPosition() {
            const chatMessages = document.getElementById('chatMessages');
            const scrollButton = document.getElementById('scrollToBottom');
            
            if (!chatMessages || !scrollButton) return;
            
            // Show button if not at bottom
            const isAtBottom = chatMessages.scrollTop + chatMessages.clientHeight >= chatMessages.scrollHeight - 20;
            
            if (!isAtBottom && !scrollBottomButtonVisible) {
                scrollButton.classList.remove('hidden');
                scrollBottomButtonVisible = true;
            } else if (isAtBottom && scrollBottomButtonVisible) {
                scrollButton.classList.add('hidden');
                scrollBottomButtonVisible = false;
            }
        }
        
        // Utility function to escape HTML
        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .toString()
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        }
        
        // Fetch with timeout
        async function fetchWithTimeout(resource, options = {}, timeout = 10000) {
            const controller = new AbortController();
            const id = setTimeout(() => controller.abort(), timeout);
            
            try {
                const response = await fetch(resource, {
                    ...options,
                    signal: controller.signal
                });
                clearTimeout(id);
                return response;
            } catch (error) {
                clearTimeout(id);
                throw error;
            }
        }
    </script>
</body>
</html>
